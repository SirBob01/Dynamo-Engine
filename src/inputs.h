#ifndef DYNAMO_INPUTS_H_
#define DYNAMO_INPUTS_H_

#include <SDL2/SDL.h>

#include <unordered_map>
#include <vector>
#include <string>
#include <cstring>

namespace Dynamo {
	typedef enum { 
		// Adapted from SDL_Scancode enum
		INPUT_UNKNOWN = 0,
		
		INPUT_A = 4,
		INPUT_B = 5,
		INPUT_C = 6,
		INPUT_D = 7,
		INPUT_E = 8,
		INPUT_F = 9,
		INPUT_G = 10,
		INPUT_H = 11,
		INPUT_I = 12,
		INPUT_J = 13,
		INPUT_K = 14,
		INPUT_L = 15,
		INPUT_M = 16,
		INPUT_N = 17,
		INPUT_O = 18,
		INPUT_P = 19,
		INPUT_Q = 20,
		INPUT_R = 21,
		INPUT_S = 22,
		INPUT_T = 23,
		INPUT_U = 24,
		INPUT_V = 25,
		INPUT_W = 26,
		INPUT_X = 27,
		INPUT_Y = 28,
		INPUT_Z = 29,
		INPUT_1 = 30,
		INPUT_2 = 31,
		INPUT_3 = 32,
		INPUT_4 = 33,
		INPUT_5 = 34,
		INPUT_6 = 35,
		INPUT_7 = 36,
		INPUT_8 = 37,
		INPUT_9 = 38,
		INPUT_0 = 39,
		INPUT_RETURN = 40,
		INPUT_ESCAPE = 41,
		INPUT_BACKSPACE = 42,
		INPUT_TAB = 43,
		INPUT_SPACE = 44,
		INPUT_MINUS = 45,
		INPUT_EQUALS = 46,
		INPUT_LEFTBRACKET = 47,
		INPUT_RIGHTBRACKET = 48,
		INPUT_BACKSLASH = 49,
		INPUT_NONUSHASH = 50,
		INPUT_SEMICOLON = 51,
		INPUT_APOSTROPHE = 52,
		INPUT_GRAVE = 53,
		INPUT_COMMA = 54,
		INPUT_PERIOD = 55,
		INPUT_SLASH = 56,
		INPUT_CAPSLOCK = 57,
		INPUT_F1 = 58,
		INPUT_F2 = 59,
		INPUT_F3 = 60,
		INPUT_F4 = 61,
		INPUT_F5 = 62,
		INPUT_F6 = 63,
		INPUT_F7 = 64,
		INPUT_F8 = 65,
		INPUT_F9 = 66,
		INPUT_F10 = 67,
		INPUT_F11 = 68,
		INPUT_F12 = 69,
		INPUT_PRINTSCREEN = 70,
		INPUT_SCROLLLOCK = 71,
		INPUT_PAUSE = 72,
		INPUT_INSERT = 73,
		INPUT_HOME = 74,
		INPUT_PAGEUP = 75,
		INPUT_DELETE = 76,
		INPUT_END = 77,
		INPUT_PAGEDOWN = 78,
		INPUT_RIGHT = 79,
		INPUT_LEFT = 80,
		INPUT_DOWN = 81,
		INPUT_UP = 82,
		INPUT_NUMLOCKCLEAR = 83,
		INPUT_KP_DIVIDE = 84,
		INPUT_KP_MULTIPLY = 85,
		INPUT_KP_MINUS = 86,
		INPUT_KP_PLUS = 87,
		INPUT_KP_ENTER = 88,
		INPUT_KP_1 = 89,
		INPUT_KP_2 = 90,
		INPUT_KP_3 = 91,
		INPUT_KP_4 = 92,
		INPUT_KP_5 = 93,
		INPUT_KP_6 = 94,
		INPUT_KP_7 = 95,
		INPUT_KP_8 = 96,
		INPUT_KP_9 = 97,
		INPUT_KP_0 = 98,
		INPUT_KP_PERIOD = 99,
		INPUT_NONUSBACKSLASH = 100,
		INPUT_APPLICATION = 101,
		INPUT_POWER = 102,
		INPUT_KP_EQUALS = 103,
		INPUT_F13 = 104,
		INPUT_F14 = 105,
		INPUT_F15 = 106,
		INPUT_F16 = 107,
		INPUT_F17 = 108,
		INPUT_F18 = 109,
		INPUT_F19 = 110,
		INPUT_F20 = 111,
		INPUT_F21 = 112,
		INPUT_F22 = 113,
		INPUT_F23 = 114,
		INPUT_F24 = 115,
		INPUT_EXECUTE = 116,
		INPUT_HELP = 117,
		INPUT_MENU = 118,
		INPUT_SELECT = 119,
		INPUT_STOP = 120,
		INPUT_AGAIN = 121,
		INPUT_UNDO = 122,
		INPUT_CUT = 123,
		INPUT_COPY = 124,
		INPUT_PASTE = 125,
		INPUT_FIND = 126,
		INPUT_MUTE = 127,
		INPUT_VOLUMEUP = 128,
		INPUT_VOLUMEDOWN = 129,
		INPUT_KP_COMMA = 133,
		INPUT_KP_EQUALSAS400 = 134,
		INPUT_INTERNATIONAL1 = 135,
		INPUT_INTERNATIONAL2 = 136,
		INPUT_INTERNATIONAL3 = 137,
		INPUT_INTERNATIONAL4 = 138,
		INPUT_INTERNATIONAL5 = 139,
		INPUT_INTERNATIONAL6 = 140,
		INPUT_INTERNATIONAL7 = 141,
		INPUT_INTERNATIONAL8 = 142,
		INPUT_INTERNATIONAL9 = 143,
		INPUT_LANG1 = 144,
		INPUT_LANG2 = 145,
		INPUT_LANG3 = 146,
		INPUT_LANG4 = 147,
		INPUT_LANG5 = 148,
		INPUT_LANG6 = 149,
		INPUT_LANG7 = 150,
		INPUT_LANG8 = 151,
		INPUT_LANG9 = 152,
		INPUT_ALTERASE = 153,
		INPUT_SYSREQ = 154,
		INPUT_CANCEL = 155,
		INPUT_CLEAR = 156,
		INPUT_PRIOR = 157,
		INPUT_RETURN2 = 158,
		INPUT_SEPARATOR = 159,
		INPUT_OUT = 160,
		INPUT_OPER = 161,
		INPUT_CLEARAGAIN = 162,
		INPUT_CRSEL = 163,
		INPUT_EXSEL = 164,
		INPUT_KP_00 = 176,
		INPUT_KP_000 = 177,
		INPUT_THOUSANDSSEPARATOR = 178,
		INPUT_DECIMALSEPARATOR = 179,
		INPUT_CURRENCYUNIT = 180,
		INPUT_CURRENCYSUBUNIT = 181,
		INPUT_KP_LEFTPAREN = 182,
		INPUT_KP_RIGHTPAREN = 183,
		INPUT_KP_LEFTBRACE = 184,
		INPUT_KP_RIGHTBRACE = 185,
		INPUT_KP_TAB = 186,
		INPUT_KP_BACKSPACE = 187,
		INPUT_KP_A = 188,
		INPUT_KP_B = 189,
		INPUT_KP_C = 190,
		INPUT_KP_D = 191,
		INPUT_KP_E = 192,
		INPUT_KP_F = 193,
		INPUT_KP_XOR = 194,
		INPUT_KP_POWER = 195,
		INPUT_KP_PERCENT = 196,
		INPUT_KP_LESS = 197,
		INPUT_KP_GREATER = 198,
		INPUT_KP_AMPERSAND = 199,
		INPUT_KP_DBLAMPERSAND = 200,
		INPUT_KP_VERTICALBAR = 201,
		INPUT_KP_DBLVERTICALBAR = 202,
		INPUT_KP_COLON = 203,
		INPUT_KP_HASH = 204,
		INPUT_KP_SPACE = 205,
		INPUT_KP_AT = 206,
		INPUT_KP_EXCLAM = 207,
		INPUT_KP_MEMSTORE = 208,
		INPUT_KP_MEMRECALL = 209,
		INPUT_KP_MEMCLEAR = 210,
		INPUT_KP_MEMADD = 211,
		INPUT_KP_MEMSUBTRACT = 212,
		INPUT_KP_MEMMULTIPLY = 213,
		INPUT_KP_MEMDIVIDE = 214,
		INPUT_KP_PLUSMINUS = 215,
		INPUT_KP_CLEAR = 216,
		INPUT_KP_CLEARENTRY = 217,
		INPUT_KP_BINARY = 218,
		INPUT_KP_OCTAL = 219,
		INPUT_KP_DECIMAL = 220,
		INPUT_KP_HEXADECIMAL = 221,
		INPUT_LCTRL = 224,
		INPUT_LSHIFT = 225,
		INPUT_LALT = 226,
		INPUT_LGUI = 227,
		INPUT_RCTRL = 228,
		INPUT_RSHIFT = 229,
		INPUT_RALT = 230,
		INPUT_RGUI = 231,
		INPUT_MODE = 257,
		INPUT_AUDIONEXT = 258,
		INPUT_AUDIOPREV = 259,
		INPUT_AUDIOSTOP = 260,
		INPUT_AUDIOPLAY = 261,
		INPUT_AUDIOMUTE = 262,
		INPUT_MEDIASELECT = 263,
		INPUT_WWW = 264,
		INPUT_MAIL = 265,
		INPUT_CALCULATOR = 266,
		INPUT_COMPUTER = 267,
		INPUT_AC_SEARCH = 268,
		INPUT_AC_HOME = 269,
		INPUT_AC_BACK = 270,
		INPUT_AC_FORWARD = 271,
		INPUT_AC_STOP = 272,
		INPUT_AC_REFRESH = 273,
		INPUT_AC_BOOKMARKS = 274,
		INPUT_BRIGHTNESSDOWN = 275,
		INPUT_BRIGHTNESSUP = 276,
		INPUT_DISPLAYSWITCH = 277,
		INPUT_KBDILLUMTOGGLE = 278,
		INPUT_KBDILLUMDOWN = 279,
		INPUT_KBDILLUMUP = 280,
		INPUT_EJECT = 281,
		INPUT_SLEEP = 282,
		INPUT_APP1 = 283,
		INPUT_APP2 = 284,

		INPUT_MOUSELEFT = 513,
		INPUT_MOUSEMIDDLE = 514,
		INPUT_MOUSERIGHT = 515,

		INPUT_LEN = 515 // Not an input, just the highest value
	} INPUT;

	class Inputs {
		SDL_Event event;

		std::unordered_map<std::string, INPUT> binds;

		bool pressed[INPUT_LEN + 1];
		bool released[INPUT_LEN + 1];
		
		std::string text_input;

		int mouse_x;
		int mouse_y;
		bool quit;

	public:
		Inputs();

		// Update the input handler
		void poll();

		// Get the value of a text input event
		std::string get_text_input();
		void reset_text_input();

		// Set and get the input bindings
		void bind(std::string command, INPUT input);
		INPUT get_bind(std::string command);

		// Check the pressed state of an input
		bool get_pressed(std::string command);

		// Check the released state of an input
		bool get_released(std::string command);

		// Get the pressed state of a raw input constant
		bool get_pressed_raw(INPUT input);

		// Get the released state of a raw input constant
		bool get_released_raw(INPUT input);

		// Get the name string of an input event
		std::string get_name(INPUT input);
		
		// Get mouse position
		int get_mouse_x();
		int get_mouse_y();

		// Test if the event handler quit
		bool get_quit();
	};
}

#endif